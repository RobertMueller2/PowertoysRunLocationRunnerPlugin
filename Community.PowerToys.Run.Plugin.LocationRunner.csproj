<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\..\..\..\Version.props" />
  
  <PropertyGroup>
    <TargetFramework>net8.0-windows</TargetFramework>
    <ProjectGuid>{244a5a21-1ee7-4952-8d0d-6920f8d8c27c}</ProjectGuid>
    <RootNamespace>Community.PowerToys.Run.Plugin.LocationRunner</RootNamespace>
    <AssemblyName>Community.PowerToys.Run.Plugin.LocationRunner</AssemblyName>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <Version>$(Version).0</Version>
    <useWPF>true</useWPF>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
    <GenerateSatelliteAssembliesForCore>true</GenerateSatelliteAssembliesForCore>
    <OutputPath>..\..\..\..\..\$(Platform)\$(Configuration)\RunPlugins\LocationRunner\</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DebugSymbols>true</DebugSymbols>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
  </PropertyGroup>  
  
  <ItemGroup>
    <ProjectReference Include="..\..\Wox.Infrastructure\Wox.Infrastructure.csproj">
      <Private>false</Private>
    </ProjectReference>
    <ProjectReference Include="..\..\Wox.Plugin\Wox.Plugin.csproj">
      <Private>false</Private>
    </ProjectReference>
  </ItemGroup>

  <Target Name="CopyPowerToysLicenseAndNotice" BeforeTargets="Build">
    <Copy SourceFiles="../../../../../LICENSE" DestinationFiles="$(OutputPath)/LICENSE_Powertoys" />
    <Copy SourceFiles="../../../../../NOTICE.md" DestinationFiles="$(OutputPath)/NOTICE_Powertoys.md" />
  </Target>
  
  <ItemGroup>
    <None Include="plugin.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="LICENSE">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="NOTICE.md">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Update="images\LocationRunnerDark.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="images\LocationRunnerLight.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <UsingTask TaskName="CreateReleaseArchive" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
      <ReleaseOutputDir ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
      Log.LogMessageFromText($"Creating release archive {OutputFilename} from {ReleaseOutputDir}", MessageImportance.High);
      try
      {
        Uri releaseDirUri = new Uri(ReleaseOutputDir);
        using (Stream zipStream = new FileStream(Path.GetFullPath(OutputFilename), FileMode.Create, FileAccess.Write))
        using (ZipArchive archive = new ZipArchive(zipStream, ZipArchiveMode.Create))
        {
            foreach (var f in Directory.GetFiles(ReleaseOutputDir, "*", SearchOption.AllDirectories))
            {
                Uri fileUri = new Uri(f);
                string relativePath = $"LocationRunner{Path.DirectorySeparatorChar}{releaseDirUri.MakeRelativeUri(fileUri).ToString().Replace('/', Path.DirectorySeparatorChar)}";
                Log.LogMessageFromText($"Adding {relativePath}", MessageImportance.Low);
                using (Stream fileStream = new FileStream(f, FileMode.Open, FileAccess.Read))
                using (Stream fileStreamInZip = archive.CreateEntry(relativePath).Open())
                    fileStream.CopyTo(fileStreamInZip);
            }
        }
        return true;
      }
      catch (Exception ex)
      {
        Log.LogErrorFromException(ex);
        return false;
      }
    ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ReleaseArchive" Condition="$(Configuration) == 'Release'" AfterTargets="Build">
    <Message Text="AfterBuild (Release)" Importance="high" />
    <CreateReleaseArchive OutputFilename="$(MSBuildProjectDirectory)\Releases\LocationRunner-$(Version).zip" ReleaseOutputDir="$(MSBuildProjectDirectory)\$(OutputPath)" />
  </Target>

</Project>
